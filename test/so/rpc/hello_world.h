// Autogenerated.
// DO NOT EDIT. All changes will be undone.
#pragma once

#include "co/rpc.h"

namespace xx {

struct HelloWorld : rpc::service {
    HelloWorld() {
        using std::placeholders::_1;
        using std::placeholders::_2;
        _methods["HelloWorld.hello"] = std::bind(&HelloWorld::hello, this, _1, _2);
        _methods["HelloWorld.world"] = std::bind(&HelloWorld::world, this, _1, _2);
    }

    virtual ~HelloWorld() {}

    virtual const char* name() const {
        return "HelloWorld";
    }

    virtual const co::map<const char*, rpc::method_t>& methods() const {
        return _methods;
    }

    virtual void hello(json::Json& req, json::Json& res) = 0;

    virtual void world(json::Json& req, json::Json& res) = 0;

    co::map<const char*, rpc::method_t> _methods;
};

} // xx
